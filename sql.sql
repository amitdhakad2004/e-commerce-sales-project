-- total sales of last 30 days
SELECT   order_date , SUM(oi.total_price) 
FROM orders o
JOIN order_items oi
ON o.order_id = oi.order_id
group by order_date
ORDER BY TO_DATE(order_date, 'DD-MM-YYYY') DESC
LIMIT 30 ;



-- Monthly revenue  (last 12 months).
SELECT TO_CHAR(TO_DATE(order_date, 'DD-MM-YYYY'), 'YYYY-MM') AS month,
       SUM(total_amount) AS monthly_revenue
FROM orders
GROUP BY month
ORDER BY month DESC 
LIMIT 12;


-- Find best performing delivery month by total value delivered.
SELECT TO_CHAR(TO_DATE(delivery_date, 'DD-MM-YYYY'), 'YYYY-MM') AS month,
       SUM(total_amount) AS delivered_value
FROM orders
WHERE status = 'Delivered'
GROUP BY month
ORDER BY delivered_value DESC
LIMIT 1;


-- Churned customers (no order in last  months)
SELECT c.customer_id, c.first_name, MAX(TO_DATE(o.order_date, 'DD-MM-YYYY')) AS last_order
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name
HAVING MAX(TO_DATE(o.order_date, 'DD-MM-YYYY')) < CURRENT_DATE - INTERVAL '1 months';




-- List top 10 most recent customers
SELECT customer_id, first_name, last_name, registration_date
FROM customers
ORDER BY TO_DATE(registration_date, 'DD-MM-YYYY') DESC
LIMIT 10;



-- Get total number of orders placed per customer
SELECT customer_id, COUNT(order_id) AS total_orders
FROM orders
GROUP BY customer_id
ORDER BY total_orders DESC;



-- Find the average rating of products per category.
SELECT category, ROUND(AVG(rating), 2) AS avg_rating
FROM products
GROUP BY category;



-- Find most popular product per category by quantity sold.
with cte as 
(
  SELECT p.category, p.name, SUM(oi.quantity) AS total_quantity,
         ROW_NUMBER() OVER (PARTITION BY p.category ORDER BY SUM(oi.quantity) DESC) AS row
  FROM order_items oi
  JOIN products p 
  ON oi.product_id = p.product_id
  GROUP BY p.category, p.name
) 
SELECT category, name, total_quantity
FROM cte
WHERE row = 1;




-- Show products that have a rating less than 3 and stock quantity below 100.
SELECT product_id , rating, stock_quantity
FROM products
WHERE rating < 3 AND stock_quantity < 100;



-- List of all orders that were cancelled.
SELECT order_id, customer_id, status
FROM orders
WHERE status = 'Cancelled'



-- count customer who cancelled orders
SELECT  customer_id , COUNT (customer_id)
FROM orders
WHERE status = 'Cancelled'
GROUP BY customer_id 
ORDER BY 2 DESC



-- Top 10 most loyal customers (most orders)
  SELECT customer_id, COUNT(*) AS total_orders
  FROM orders
  GROUP BY customer_id
  ORDER BY total_orders DESC
LIMIT 10;



-- Total revenue per customer
SELECT customer_id, SUM(total_amount) AS total_spent
FROM orders 
GROUP BY customer_id
ORDER BY total_spent DESC ;


-- Count of orders by status 
SELECT status, COUNT(*) AS total_orders
FROM orders
GROUP BY status;


-- Find customers from a specific state (e.g., California).
SELECT customer_id, first_name, last_name
FROM customers
WHERE state = 'California';


-- Calculate total revenue per product.
SELECT product_id, SUM(total_price) AS revenue
FROM order_items
GROUP BY product_id
ORDER BY SUM(total_price) DESC;



-- Revenue generated by each product brand.
SELECT p.category, p.brand, SUM(oi.total_price) AS brand_revenue
FROM order_items oi
JOIN products p
ON oi.product_id = p.product_id
GROUP BY p.brand , p.category
ORDER BY category DESC



-- Total number of products sold per category
SELECT p.category, SUM(oi.quantity) AS total_sold
FROM order_items oi
JOIN products p 
ON oi.product_id = p.product_id
GROUP BY p.category;



-- Show products that have never been ordered.
SELECT p.product_id
FROM products p
LEFT JOIN order_items oi
ON p.product_id = oi.product_id
WHERE oi.product_id IS NULL;


-- Find the average delivery time for delivered orders
SELECT ROUND(AVG(TO_DATE(delivery_date, 'DD-MM-YYYY') - TO_DATE(order_date, 'DD-MM-YYYY'))) AS avg_delivery_days
FROM orders
WHERE status = 'Delivered';



-- List orders where payment was 'Success' but amount paid is 0.
SELECT p.order_id, p.amount_paid
FROM payments p
WHERE p.payment_status = 'Success' AND p.amount_paid = 0;



-- Identify first order placed by each customer.
with cte as
(
  SELECT customer_id, order_id, order_date,
         ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY TO_DATE(order_date, 'DD-MM-YYYY')) AS row
  FROM orders
) 
SELECT * FROM cte 
WHERE row = 1



-- Product sales distribution by state.
SELECT  c.state, SUM(oi.quantity) AS total_sold
FROM order_items oi
JOIN orders o  ON oi.order_id = o.order_id
JOIN customers c  ON o.customer_id = c.customer_id
GROUP BY c.state;




-- Top 3 product categories per month
WITH monthly_category_sales AS 
(
  SELECT TO_CHAR(TO_DATE(order_date, 'DD-MM-YYYY'), 'YYYY-MM') AS month,
         p.category, SUM(oi.total_price) AS total_revenue
  FROM orders o
  JOIN order_items oi ON o.order_id = oi.order_id
  JOIN products p ON oi.product_id = p.product_id
  GROUP BY month, p.category 
),
 TOP_3_sales_per_month AS
 (
  SELECT *, RANK() OVER (PARTITION BY month ORDER BY total_revenue DESC ) rank
  FROM monthly_category_sales
) 
SELECT *
FROM TOP_3_sales_per_month
WHERE rank <= 3;



-- Identify products with consistently high sales (sold every month for the last 6 months).
WITH monthly_sales AS (
  SELECT product_id,
         TO_CHAR(TO_DATE(order_date, 'DD-MM-YYYY'), 'YYYY-MM') AS sale_month
  FROM orders o
  JOIN order_items oi ON o.order_id = oi.order_id
  WHERE TO_DATE(order_date, 'DD-MM-YYYY') >= CURRENT_DATE - INTERVAL '6 months'
  GROUP BY product_id, sale_month
)
SELECT product_id
FROM monthly_sales
GROUP BY product_id
HAVING COUNT(DISTINCT sale_month) = 6;



-- Orders paid partially (total amount  > amount paid)
SELECT o.order_id, o.total_amount, p.amount_paid
FROM orders o
JOIN payments p ON o.order_id = p.order_id
WHERE p.amount_paid < o.total_amount;



-- Find customers who buy mostly from one brand
with customer_brand as
(
SELECT customer_id, brand, COUNT(brand) AS brand_orders
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN products p ON oi.product_id = p.product_id
GROUP BY customer_id, brand
ORDER BY customer_id
),
 TOP_brand AS
 (
  SELECT *, RANK() OVER (PARTITION BY customer_id ORDER BY brand_orders DESC ) AS rank
  FROM customer_brand
) 
select customer_id, brand, brand_orders from TOP_brand
WHERE rank = 1



-- Calculate average number of items per order.
WITH avg_number AS
(
  SELECT order_id, COUNT(*) AS item_count
  FROM order_items
  GROUP BY order_id
  ) 
SELECT ROUND(AVG(item_count),2)
FROM avg_number



-- Customer : Gold, Silver, Bronze based on spend
WITH cte AS 
(
  SELECT customer_id, SUM(total_amount) AS total_spent
  FROM orders
  GROUP BY customer_id
  )
SELECT customer_id, total_spent,
       CASE
         WHEN total_spent >= 500000 THEN 'Gold'
         WHEN total_spent >= 400000 THEN 'Silver'
         ELSE 'Bronze'
       END AS segment
  FROM cte




-- Get month-over-month growth in orders.
WITH monthly_orders AS (
  SELECT TO_CHAR(TO_DATE(order_date, 'DD-MM-YYYY'), 'YYYY-MM') AS month,
         COUNT(order_id) AS total_orders
  FROM orders
  GROUP BY month
),
growth AS (
  SELECT month, total_orders,
         LAG(total_orders) OVER (ORDER BY month ) AS prev_orders
  FROM monthly_orders
)
SELECT month, total_orders, prev_orders,
       ROUND((total_orders - prev_orders) * 100.0 / (prev_orders), 2) AS growth_rate
FROM growth;
















